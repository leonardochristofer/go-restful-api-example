// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/leonardochristofer/go-restful-api-example/model"
	mock "github.com/stretchr/testify/mock"
)

// CakeInterface is an autogenerated mock type for the CakeInterface type
type CakeInterface struct {
	mock.Mock
}

// CreateCake provides a mock function with given fields: ctx, cake
func (_m *CakeInterface) CreateCake(ctx context.Context, cake model.Cake) error {
	ret := _m.Called(ctx, cake)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Cake) error); ok {
		r0 = rf(ctx, cake)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCake provides a mock function with given fields: ctx, id
func (_m *CakeInterface) DeleteCake(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCakes provides a mock function with given fields: ctx
func (_m *CakeInterface) GetAllCakes(ctx context.Context) ([]model.Cake, error) {
	ret := _m.Called(ctx)

	var r0 []model.Cake
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Cake, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Cake); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Cake)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCake provides a mock function with given fields: ctx, id
func (_m *CakeInterface) GetCake(ctx context.Context, id uint64) (model.Cake, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Cake
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (model.Cake, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) model.Cake); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Cake)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCake provides a mock function with given fields: ctx, id, cake
func (_m *CakeInterface) UpdateCake(ctx context.Context, id uint64, cake model.Cake) error {
	ret := _m.Called(ctx, id, cake)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, model.Cake) error); ok {
		r0 = rf(ctx, id, cake)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCakeInterface creates a new instance of CakeInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCakeInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CakeInterface {
	mock := &CakeInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
